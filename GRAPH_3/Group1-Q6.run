
reset;
option solver gurobi;
model parameters.mod;
data instance1.dat;
param param_i;
param maxd; #is the maximum distance 
############################################
#COMPUTING THE MAXIMUM DISTANCE GLOBALLY 
let maxd:=0;
for{(i,j) in A}{
	if lenght[i,j]>maxd then{
			let maxd:=lenght[i,j];
		}
}
printf"DATA 1";
printf"\n\n";
#CONTINUOUS RELAXATION MODEL
model q5.mod;

problem CR: x,y,z,flow, DemandRouting, capacity, amp, capa, Cover; 
#problem CR: x,y,z,flow, DemandRouting, capacity, amp, capa; 
#problem Separation: chi, Violation, CoverCondition;
problem Separation: chi, Violation, CoverCondition,NOOOOO,Ni; 
printf"\n\n";

param initialSol default 0;
solve CR;
# Set the value of initialSol
let initialSol := flow;

param iter default 0;
param flag default 0;
param flag2 default 0;

repeat 
{
	#Solve the CR
	solve CR;
	#Save x_start
	for {(i,j) in A, k in K}
	{
		let x_star[i,j,k] := x[i,j,k];
	}
	
	if (sum{i in N}y[i] <= 0 + 0.000001) then
	{
		printf "IT IS NOT POSSIBLE TO ADD CUTS\n"; 
		printf"\n\n";
		let flag2:=1;
		break;
	}
	#Looking for y greater than 0
	for {i in N: y[i] > 0}
	{
		
		#ASSIGNING VARIABLES FOR THE SEPARATION PROBLEM 
		let param_i := i; 
		#display param_i;
		solve Separation; 
		display Violation;
		
		
		
		if (Violation < 1 - 0.0001) then
		{
	
		    
			#Add the constraint 
			let nc := nc + 1; 
			let CI_c[nc]:=0;
			let CI_i[nc] :=  setof {j in N, k in K: chi[k,j] = 1} i;
			let CI_j[nc] :=  setof {j in N, k in K: chi[k,j] = 1} j;
			let CI_k[nc] :=  setof {j in N, k in K: chi[k,j] = 1} k;
			 
			#display {j in N, k in K:chi[k,j] = 1}(param_i, j,k);
			
			for{j in N, k in K:chi[k,j] = 1}{
				let CI_c[nc]:=CI_c[nc]+1;
				#let CHI:=CHI union {k,j};
				let chi2[nc,k,j]:=1;
			}
			
			#display CI_i;
			let iter := iter + 1; 
			#Then we need to solve it again 
			let flag:=1;
			break;
		}
		else 
		{

			#We keep looking for violations
			continue; 
		}
	}
	if flag==1 then {
		let flag:=0;
	}
	else {
	    #BREAK SINCE VIOLATION IS NOT MET
		break; 
	}
	
}until(flag>=1);


if flag2<1 then {
	printf "##############\n";
	printf"  \n Initial CR relaxation:  %.3f \n",initialSol; 
	printf "##############\n";
	printf"FINAL SOLUTION WITH THE CUTS \n\n";
	solve CR;
}
#printf"  CPU time %g\n", _ampl_elapsed_time;
printf"  Computational Time %g\n",_ampl_user_time; 

printf"\n Solution details: \n";

printf"\n x[i,j,k] values: \n";
for{k in K}{
 
 	printf"\n demand %d from %d to %d:\n", k , s[k], t[k];
	for{(i,j) in A}{
	
		if(x[i,j,k] > 0) then
 			printf "\t arc (%d,%d) (%g)", i, j, x[i,j,k];

	}
}
printf"\n\n";
printf"\n y[i] values: \n";
for{i in N}{
	if(y[i] > 0) then
 		printf "\n Node (%d) has amplifier (%g)", i, y[i];
 		
}
printf"\n\n";
printf"\n z[i,j] values: \n";
for{(i,j) in A}{
	
		if(z[i,j] > 0) then {
 			printf "\t arc (%d,%d) has (%g) transportation channels", i, j, z[i,j];
			printf"\n\n";
		}
}

printf"\n\n";
printf "##############\n";


reset;
option solver gurobi;
model parameters.mod;
data instance2.dat;
param param_i;
param maxd; #is the maximum distance 
############################################
#COMPUTING THE MAXIMUM DISTANCE GLOBALLY 
let maxd:=0;
for{(i,j) in A}{
	if lenght[i,j]>maxd then{
			let maxd:=lenght[i,j];
		}
}

printf"DATA 2";
printf"\n\n";
#CONTINUOUS RELAXATION MODEL
model q5.mod;

problem CR: x,y,z,flow, DemandRouting, capacity, amp, capa, Cover; 
#problem CR: x,y,z,flow, DemandRouting, capacity, amp, capa; 
#problem Separation: chi, Violation, CoverCondition;
problem Separation: chi, Violation, CoverCondition,NOOOOO,Ni; 
printf"\n\n";

param initialSol default 0;
solve CR;
# Set the value of initialSol
let initialSol := flow;

param iter default 0;
param flag default 0;
param flag2 default 0;

repeat 
{
	#Solve the CR
	solve CR;
	#Save x_start
	for {(i,j) in A, k in K}
	{
		let x_star[i,j,k] := x[i,j,k];
	}
	
	if (sum{i in N}y[i] <= 0 + 0.000001) then
	{
		printf "IT IS NOT POSSIBLE TO ADD CUTS\n"; 
		printf"\n\n";
		let flag2:=1;
		break;
	}
	#Looking for y greater than 0
	for {i in N: y[i] > 0}
	{
		
		#ASSIGNING VARIABLES FOR THE SEPARATION PROBLEM 
		let param_i := i; 
		#display param_i;
		solve Separation; 
		display Violation;
		
		
		
		if (Violation < 1 - 0.0001) then
		{
	
		    
			#Add the constraint 
			let nc := nc + 1; 
			let CI_c[nc]:=0;
			let CI_i[nc] :=  setof {j in N, k in K: chi[k,j] = 1} i;
			let CI_j[nc] :=  setof {j in N, k in K: chi[k,j] = 1} j;
			let CI_k[nc] :=  setof {j in N, k in K: chi[k,j] = 1} k;
			 
			#display {j in N, k in K:chi[k,j] = 1}(param_i, j,k);
			
			for{j in N, k in K:chi[k,j] = 1}{
				let CI_c[nc]:=CI_c[nc]+1;
				#let CHI:=CHI union {k,j};
				let chi2[nc,k,j]:=1;
			}
			
			#display CI_i;
			let iter := iter + 1; 
			#Then we need to solve it again 
			let flag:=1;
			break;
		}
		else 
		{

			#We keep looking for violations
			continue; 
		}
	}
	if flag==1 then {
		let flag:=0;
	}
	else {
	    #BREAK SINCE VIOLATION IS NOT MET
		break; 
	}
	
}until(flag>=1);


	
if flag2<1 then {
	printf "##############\n";
	printf"  \n Initial CR relaxation:  %.3f \n",initialSol; 
	printf "##############\n";
	printf"FINAL SOLUTION WITH THE CUTS \n\n";
	solve CR;
}
#printf"  CPU time %g\n", _ampl_elapsed_time;
printf"  Computational Time %g\n",_ampl_user_time; 

printf"\n Solution details: \n";

printf"\n x[i,j,k] values: \n";
for{k in K}{
 
 	printf"\n demand %d from %d to %d:\n", k , s[k], t[k];
	for{(i,j) in A}{
	
		if(x[i,j,k] > 0) then
 			printf "\t arc (%d,%d) (%g)", i, j, x[i,j,k];

	}
}
printf"\n\n";
printf"\n y[i] values: \n";
for{i in N}{
	if(y[i] > 0) then
 		printf "\n Node (%d) has amplifier (%g)", i, y[i];
 		
}
printf"\n\n";
printf"\n z[i,j] values: \n";
for{(i,j) in A}{
	
		if(z[i,j] > 0) then {
 			printf "\t arc (%d,%d) has (%g) transportation channels", i, j, z[i,j];
			printf"\n\n";
		}
}


printf"\n\n";
printf "##############\n";


reset;
option solver gurobi;
model parameters.mod;
data instance3.dat;
param param_i;
param maxd; #is the maximum distance 
############################################
#COMPUTING THE MAXIMUM DISTANCE GLOBALLY 
let maxd:=0;
for{(i,j) in A}{
	if lenght[i,j]>maxd then{
			let maxd:=lenght[i,j];
		}
}

printf"DATA 3";
printf"\n\n";

#CONTINUOUS RELAXATION MODEL
model q5.mod;

problem CR: x,y,z,flow, DemandRouting, capacity, amp, capa, Cover; 
#problem CR: x,y,z,flow, DemandRouting, capacity, amp, capa; 
#problem Separation: chi, Violation, CoverCondition;
problem Separation: chi, Violation, CoverCondition,NOOOOO,Ni; 
printf"\n\n";

param initialSol default 0;
solve CR;
# Set the value of initialSol
let initialSol := flow;

param iter default 0;
param flag default 0;
param flag2 default 0;

repeat 
{
	#Solve the CR
	solve CR;
	#Save x_start
	for {(i,j) in A, k in K}
	{
		let x_star[i,j,k] := x[i,j,k];
	}
	
	if (sum{i in N}y[i] <= 0 + 0.000001) then
	{
		printf "IT IS NOT POSSIBLE TO ADD CUTS\n"; 
		printf"\n\n";
		let flag2:=1;
		break;
	}
	#Looking for y greater than 0
	for {i in N: y[i] > 0}
	{
		
		#ASSIGNING VARIABLES FOR THE SEPARATION PROBLEM 
		let param_i := i; 
		#display param_i;
		solve Separation; 
		display Violation;
		
		
		
		if (Violation < 1 - 0.0001) then
		{
	
		    
			#Add the constraint 
			let nc := nc + 1; 
			let CI_c[nc]:=0;
			let CI_i[nc] :=  setof {j in N, k in K: chi[k,j] = 1} i;
			let CI_j[nc] :=  setof {j in N, k in K: chi[k,j] = 1} j;
			let CI_k[nc] :=  setof {j in N, k in K: chi[k,j] = 1} k;
			 
			#display {j in N, k in K:chi[k,j] = 1}(param_i, j,k);
			
			for{j in N, k in K:chi[k,j] = 1}{
				let CI_c[nc]:=CI_c[nc]+1;
				#let CHI:=CHI union {k,j};
				let chi2[nc,k,j]:=1;
			}
			
			#display CI_i;
			let iter := iter + 1; 
			#Then we need to solve it again 
			let flag:=1;
			break;
		}
		else 
		{

			#We keep looking for violations
			continue; 
		}
	}
	if flag==1 then {
		let flag:=0;
	}
	else {
	    #BREAK SINCE VIOLATION IS NOT MET
		break; 
	}
	
}until(flag>=1);


	
if flag2<1 then {
	printf "##############\n";
	printf"  \n Initial CR relaxation:  %.3f \n",initialSol; 
	printf "##############\n";
	printf"FINAL SOLUTION WITH THE CUTS \n\n";
	solve CR;
}
#printf"  CPU time %g\n", _ampl_elapsed_time;
printf"  Computational Time %g\n",_ampl_user_time; 

printf"\n Solution details: \n";

printf"\n x[i,j,k] values: \n";
for{k in K}{
 
 	printf"\n demand %d from %d to %d:\n", k , s[k], t[k];
	for{(i,j) in A}{
	
		if(x[i,j,k] > 0) then
 			printf "\t arc (%d,%d) (%g)", i, j, x[i,j,k];

	}
}
printf"\n\n";
printf"\n y[i] values: \n";
for{i in N}{
	if(y[i] > 0) then
 		printf "\n Node (%d) has amplifier (%g)", i, y[i];
 		
}
printf"\n\n";
printf"\n z[i,j] values: \n";
for{(i,j) in A}{
	
		if(z[i,j] > 0) then {
 			printf "\t arc (%d,%d) has (%g) transportation channels", i, j, z[i,j];
			printf"\n\n";
		}
}


printf"\n\n";
printf "##############\n";


reset;
option solver gurobi;
model parameters.mod;
data instance4.dat;
param param_i;
param maxd; #is the maximum distance 
############################################
#COMPUTING THE MAXIMUM DISTANCE GLOBALLY 
let maxd:=0;
for{(i,j) in A}{
	if lenght[i,j]>maxd then{
			let maxd:=lenght[i,j];
		}
}
printf"DATA 4";
printf"\n\n";

#CONTINUOUS RELAXATION MODEL
model q5.mod;

problem CR: x,y,z,flow, DemandRouting, capacity, amp, capa, Cover; 
#problem CR: x,y,z,flow, DemandRouting, capacity, amp, capa; 
#problem Separation: chi, Violation, CoverCondition;
problem Separation: chi, Violation, CoverCondition,NOOOOO,Ni; 
printf"\n\n";

param initialSol default 0;
solve CR;
# Set the value of initialSol
let initialSol := flow;

param iter default 0;
param flag default 0;
param flag2 default 0;

repeat 
{
	#Solve the CR
	solve CR;
	#Save x_start
	for {(i,j) in A, k in K}
	{
		let x_star[i,j,k] := x[i,j,k];
	}
	
	if (sum{i in N}y[i] <= 0 + 0.000001) then
	{
		printf "IT IS NOT POSSIBLE TO ADD CUTS\n"; 
		printf"\n\n";
		let flag2:=1;
		break;
	}
	#Looking for y greater than 0
	for {i in N: y[i] > 0}
	{
		
		#ASSIGNING VARIABLES FOR THE SEPARATION PROBLEM 
		let param_i := i; 
		#display param_i;
		solve Separation; 
		display Violation;
		
		
		
		if (Violation < 1 - 0.0001) then
		{
	
		    
			#Add the constraint 
			let nc := nc + 1; 
			let CI_c[nc]:=0;
			let CI_i[nc] :=  setof {j in N, k in K: chi[k,j] = 1} i;
			let CI_j[nc] :=  setof {j in N, k in K: chi[k,j] = 1} j;
			let CI_k[nc] :=  setof {j in N, k in K: chi[k,j] = 1} k;
			 
			#display {j in N, k in K:chi[k,j] = 1}(param_i, j,k);
			
			for{j in N, k in K:chi[k,j] = 1}{
				let CI_c[nc]:=CI_c[nc]+1;
				#let CHI:=CHI union {k,j};
				let chi2[nc,k,j]:=1;
			}
			
			#display CI_i;
			let iter := iter + 1; 
			#Then we need to solve it again 
			let flag:=1;
			break;
		}
		else 
		{

			#We keep looking for violations
			continue; 
		}
	}
	if flag==1 then {
		let flag:=0;
	}
	else {
	    #BREAK SINCE VIOLATION IS NOT MET
		break; 
	}
	
}until(flag>=1);


	
if flag2<1 then {
	printf "##############\n";
	printf"  \n Initial CR relaxation:  %.3f \n",initialSol; 
	printf "##############\n";
	printf"FINAL SOLUTION WITH THE CUTS \n\n";
	solve CR;
}
#printf"  CPU time %g\n", _ampl_elapsed_time;
printf"  Computational Time %g\n",_ampl_user_time; 

printf"\n Solution details: \n";

printf"\n x[i,j,k] values: \n";
for{k in K}{
 
 	printf"\n demand %d from %d to %d:\n", k , s[k], t[k];
	for{(i,j) in A}{
	
		if(x[i,j,k] > 0) then
 			printf "\t arc (%d,%d) (%g)", i, j, x[i,j,k];

	}
}
printf"\n\n";
printf"\n y[i] values: \n";
for{i in N}{
	if(y[i] > 0) then
 		printf "\n Node (%d) has amplifier (%g)", i, y[i];
 		
}
printf"\n\n";
printf"\n z[i,j] values: \n";
for{(i,j) in A}{
	
		if(z[i,j] > 0) then {
 			printf "\t arc (%d,%d) has (%g) transportation channels", i, j, z[i,j];
			printf"\n\n";
		}
}


printf"\n\n";
printf "##############\n";