reset; 

option solver gurobi; 

model parameters.mod;
model q4.mod; 
data ass2-1.dat; 


printf "DATA 1\n"; 

set minimum_costs default {}; 
set minimum_distances default {};
set served_towns default {};

param min_cost_value; 
param min_distance_value; 
param available_capacity; 


#AUXILIARY DISTANCES 
param aux_d{Iset, Jset}; 
for {i in Iset}
{
	for {j in Jset}
	{
		let aux_d[i,j] := d[i,j];
	}
}

#AUXILIARY COSTS AND DEMAND 
param aux_t{Iset};
for {i in Iset}
{
	let aux_t[i] := t[i];
}
param aux_c{Jset}; 
for {j in Jset}
{
	let aux_c[j] := c[j];
}


param flag_center; #parameter for looping through the centers
param flag_total; 
param served; 
param minimum_demand; 

let flag_center := 0; 
let flag_total := 0; 
let served := 0; 


#/*

param mind;
param dmin{Iset} default 0; #THIS IS A LIST OF THE INDEXES OF THE CLOSEST FACILITY FOR EVERY TOWN
# dmin[town] = will give you the index of the facility with the minimum distance 
param finito; #this is a flag 
param maxd; #is the maximum distance 
param miny; #the minimum number of why 
# if we need to switch off more than miny facilities then we will stop the code 
# and consider it unfeasible 


param n_zeros; 
let n_zeros := 0; # we'll use this to stop the code when is total - n_zeros < miny 
param y_zero{Jset} default 0; # if 1 the facility must be put to zero
param unf; #flag for unfeasibility 

############################################
#COMPUTING THE MAXIMUM DISTANCE GLOBALLY 
let maxd:=0;
for {i in Iset}{
	for {j in Jset}{
		if d[i,j]>maxd then{
			let maxd:=d[i,j];
		}
	}
}
##############################################


#Get the min number of facilities to support the towns, if the t's are equally distributed
let miny:=ceil(sum{i in Iset}t[i]/Gamma);
printf "Rounded up: %.2f\n", miny;

#/*

let finito:=0;#
let unf:=0; #still feasible
repeat{
	#printf "sporco\n";
	let finito:=1;
	#compute the matrix of min Distance facility for each town
	for{i in Iset}{
		let mind:=maxd*2;#big distance
		for{j in Jset}{
			if aux_d[i,j]<mind then {
				let mind:=aux_d[i,j];#store the min distance value
				let dmin[i]:=j; #store the index j == the facility with the min distance, if y[i]==1
			}
		}
	}

	#verify if some facility dont have capacity for its closest towns
	for{j in Jset}{
		
		#display sum{i in Iset:dmin[i]==j}t[i];
		#display Gamma;
		if sum{i in Iset:dmin[i]==j}t[i]>Gamma then 
		{
			#printf "DIO \n";
			let n_zeros := n_zeros + 1; #increment the counter 
			#this y cant be put to 1
			let y_zero[j]:=1;#ADD to list of unfeasible y
			let finito:=0;#has to do another loop of the while
			for {i in Iset}{
				#the aux d to a high value
				let aux_d[i,j]:=maxd*3;
			
			}
			
		}
	}
	
	if J - n_zeros < miny then 
	{
		#UNFEASIBLE, the unfeasibility may have happen before, but here for sure it is unfeasible
		let finito:=1;
		let unf:=1;
	}

}until(finito==1);

if unf==1 then {#If this happens, it's for sure unfeasible
	print("UNFEASIBLE");
	printf"\n\n";
}else{
	print("MAYBE FEASIBLE");
	printf"\n\n";
}
#display dmin;
/*

######################

for {i in Iset}
{
	fix x[i,dmin[i]] := 1;
}


for {j in Jset}{
	if y_zero[j]==0 and sum{i in Iset: dmin[i]==j}1 >= 1 then{
		fix y[j]:=1;
	}else{
		fix y[j]:=0;
	}
}
#solve; 

display objfun;

*/
######################

#WE FIND THE MINIMUM COSTS


param assigned;
param at;

	
repeat { 
	
	#Do not look for the unfeasibles facilities
	let min_cost_value := min{j in Jset : aux_c[j] and y_zero[j]==0}aux_c[j]; 
	let minimum_costs := {j in Jset: aux_c[j] == min_cost_value and y_zero[j]==0};
	#display min_cost_value; 
	print("PORC");
	
	
	#WE TRY TO ADD SOME TOWNSHIPS 
	for {facility in minimum_costs}
	{
		printf "##############\n";
		display facility; 
		let available_capacity := Gamma; #SET CAPACITY TO GAMMA
		#printf "##############\n"; 
		#WE COMPUTE THE MINIMUM DEMAND 
		let minimum_demand := min{i in Iset diff served_towns: aux_t[i]}aux_t[i]; 
		#display minimum_demand; 
		let y[facility] := 1; 
		repeat {
			for {i in Iset}{
				#first we should assign the towns with the less dist to this facility
				if dmin[i]==facility then {
					for{j in Jset:y[j]==1 and x[i,j]==1}{#need to check if this town has been added to another facility, take it out
						let x[i,j]:=0;#break the connection of the town to a facilty with higher distance
						let served := served - 1; 
						let served_towns := served_towns diff {i};
					}
					let x[i, facility] := 1; 
					let served := served + 1; 
					let served_towns := served_towns union {i};
					let available_capacity := available_capacity-t[i];
				}
				else{
					for {j in Jset:y[j]==1 and x[i,j]==1 and dmin[i]!=j}{#in case the town assigned is not to the minimum
	
						if d[i,j]>d[i,facility] then {#check if the previous distance is worse than new facility
							let x[i,j]:=0;
							let x[i, facility] := 1;
							let available_capacity := available_capacity-t[i];
							if available_capacity<0 then
								print('AQUUUUU');
							
							let at:=0;
							
							#see if the facility j has still some towns active, otherwise y[j]==0
							for{k in Iset:x[k,j]==1}{
								let at:=at+1;
							}
							if at==0 then {
								let y[j]:=0;
							}
						}
						
					}
					
				}	
				
			}
		
		
			#WE EVALUATE BASED ON DISTANCE 
			#display available_capacity; 
			#display Iset diff served_towns; 
			let min_distance_value := min{i in Iset diff served_towns: aux_d[i,facility] and aux_t[i] <= available_capacity}aux_d[i, facility];
	
			#let minimum_distances := {i in Iset: aux_d[i,facility] == min_distance_value };
			let minimum_distances := {i in Iset diff served_towns: aux_d[i,facility] == min_distance_value };
			#display minimum_distances;
			#display min_distance_value; 
			
			if card(minimum_distances) == 0 then 
			{
				break;
			} 
	
			for {dmd in minimum_distances}
			{
				#printf "##########\n";
				#display available_capacity;
				#display t[dmd];
				#display dmd; 
				#printf "##########\n";
				
				#WE CHECK IN CASE OF MULTIPLE ASSIGNMENTS 
				if t[dmd] <= available_capacity then
				{
					
					let available_capacity := available_capacity - t[dmd];
					#UPDATE DEMAND 
					#display facility; 
					#display dmd; 
					
					let aux_d[dmd, facility] := 1000000;
					let x[dmd, facility] := 1; 
					let served := served + 1; 
					let served_towns := served_towns union {dmd};
				}
				
				if served == I then 
				#if card(served_towns) == I then 
				{
					let flag_total := 1; 
					break; 
				}
			}
			
			if flag_total == 1 then 
				break; 
			
		} until (available_capacity <= minimum_demand);
	
		printf "TOTAL TOWNS_SERVED: \n";
		display served; 
		let aux_c[facility]:= 100000; 
		if served == I then 
				#if card(served_towns) == I then 
				{
					let flag_total := 1; 
					break; 
				}
		
		if flag_total == 1 then 
			break; 
	}
	#display available_capacity; 
	#printf "FIRST SERVICE FULL\n";

	
	
	
} until (flag_total != 0); 
 


printf "FINITO PROGRAMMA 1\n"; 
	

printf "Heuristic objective function: \n"; 

#display sum{j in Jset}c[j]*y[j]+sum{i in Iset, j in Jset}x[i,j]*d[i,j]*t[i];
display objfun;


printf"\n Solution details: \n";
	for{index in Jset}{
		if (y[index] > 0) then{
			printf"\n Center %d ", index;
			printf"\t Townships(I): ";
			for{terminalindex in Iset}{
				if(x[terminalindex, index] > 0) then{
					printf" %d \t", terminalindex ;
				}
			}
		}	
	}
	printf"\n\n";
printf"\n\n";


#timessss

#printf"  CPU time %g\n", _ampl_elapsed_time;
printf"  Computational Time %g\n",_ampl_user_time; 
printf"\n\n";


#COUNT1 IS THE NUMBER OF X VALUES EQUAL TO 1
param count1;
let count1:=0;

for {i in Iset, j in Jset: x[i,j]==1}{
	let count1:=count1+1;

}

#display count1;

if count1 ==I then{
	print("OK, (x[i,j]==1) == I");#all towns connected
}

param count2;
param flage;
let flage:=0;
let count2:=0;
#COUNT 2 SHOWS IF THERE IS ONLY ONE 1 PER ROW
for {i in Iset}{
	for{j in Jset: x[i,j]==1}{
		let count2:=count2+1;
	}
	if count2!=1 then{
		print("ERROR");
		let flage:=1;
	}
	let count2:=0;
}

if flage==0 then{
	print("ONLY 1 per row");#only one facility per town
	printf"\n\n";
}

#see if capacity is respected
for{j in Jset:y[j]==1}{
	#display j;
	#display sum{i in Iset:x[i,j]==1}t[i];
	if sum{i in Iset:x[i,j]==1}t[i]>Gamma then 
	{#this y cant be put to 1
		print("errrorrrrrrrr")
	}
		
}

param mintd;

#see if min is respected
for{i in Iset}{
	if y[dmin[i]]==0 then {
		for {j in Jset:y[j]==1 and x[i,j]==1}{
			let mintd:=d[i,j];
			#display mintd;
			#display j;
		}
		for {j in Jset:y[j]==1}{
			if d[i,j]<mintd then {
				
				print("ERRRRRRRRRR");
				display j;
				break;
			}
		}
	}
}


/*
#verify if some facility dont have capacity for its closest towns
for{j in Jset:y[j]==1}{
	display j;
	display sum{i in Iset:dmin[i]==j}t[i];
	if sum{i in Iset:dmin[i]==j}t[i]>Gamma then 
	{#this y cant be put to 1
		print("errrorrrrrrrr")
	}
		
}

param otro{Iset};
param cotro;



for{i in Iset}{
	let cotro:=0;
	if y[dmin[i]]==0 then {
		print("ERROR");#check if all towns conected to the dmin facility
		printf"\n\n";
		display i;
		printf"\n\n";
	}
	let otro[i]:=d[i,dmin[i]];
	for{j in Jset:y[j]==1}{
		if otro[i]==d[i,j] then{
			let cotro:=cotro+1;
			if cotro>1 then {
				print("MAS DE 1 TOWN CON MISMA MIN DIST");
				printf"\n\n";
				display i;
				printf"\n\n";
				display j;
				display dmin[i];
			}
		}
		if otro[i]>d[i,j] then{
			print("DMIN IS NOT OK");
		}
		
	}
	
	if cotro>1 then {
		print("MAS DE 1 TOWN CON MISMA MIN DIST");
		printf"\n\n";
		display i;
		printf"\n\n";
	}
}



*/
